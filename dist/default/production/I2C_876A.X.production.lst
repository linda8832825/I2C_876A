

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 12 13:38:04 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F876A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F876A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232                           
   233                           	psect	idataCOMMON
   234  05C1                     __pidataCOMMON:
   235                           
   236                           ;initializer for _BackLight_State
   237  05C1  3408               	retlw	8
   238                           
   239                           	psect	nvCOMMON
   240  007A                     __pnvCOMMON:
   241  007A                     _i2c_add:
   242  007A                     	ds	1
   243  0013                     _SSPBUF	set	19
   244  0014                     _SSPCON	set	20
   245  0063                     _SSPIF	set	99
   246  0030                     _RB0	set	48
   247  0093                     _SSPADD	set	147
   248  0094                     _SSPSTAT	set	148
   249  0091                     _SSPCON2	set	145
   250  048B                     _RCEN	set	1163
   251  048E                     _ACKSTAT	set	1166
   252  048C                     _ACKEN	set	1164
   253  048D                     _ACKDT	set	1165
   254  048A                     _PEN	set	1162
   255  0489                     _RSEN	set	1161
   256  0488                     _SEN	set	1160
   257  043C                     _TRISC4	set	1084
   258  043B                     _TRISC3	set	1083
   259  0430                     _TRISB0	set	1072
   260                           
   261                           	psect	strings
   262  0003                     __pstrings:
   263  0003                     stringtab:
   264  0003                     __stringtab:
   265  0003                     stringcode:	
   266                           ;	String table - string pointers are 1 byte each
   267                           
   268  0003                     stringdir:
   269  0003  3000               	movlw	high stringdir
   270  0004  008A               	movwf	10
   271  0005  0804               	movf	4,w
   272  0006  0A84               	incf	4,f
   273  0007  0782               	addwf	2,f
   274  0008                     __stringbase:
   275  0008  3400               	retlw	0
   276  0009                     __end_of__stringtab:
   277  0009                     STR_1:
   278  0009  3420               	retlw	32	;' '
   279  000A  344B               	retlw	75	;'K'
   280  000B  3468               	retlw	104	;'h'
   281  000C  3461               	retlw	97	;'a'
   282  000D  346C               	retlw	108	;'l'
   283  000E  3465               	retlw	101	;'e'
   284  000F  3464               	retlw	100	;'d'
   285  0010  3420               	retlw	32	;' '
   286  0011  344D               	retlw	77	;'M'
   287  0012  3461               	retlw	97	;'a'
   288  0013  3467               	retlw	103	;'g'
   289  0014  3464               	retlw	100	;'d'
   290  0015  3479               	retlw	121	;'y'
   291  0016  3400               	retlw	0
   292  0017                     STR_2:
   293  0017  3420               	retlw	32	;' '
   294  0018  3444               	retlw	68	;'D'
   295  0019  3465               	retlw	101	;'e'
   296  001A  3465               	retlw	101	;'e'
   297  001B  3470               	retlw	112	;'p'
   298  001C  3442               	retlw	66	;'B'
   299  001D  346C               	retlw	108	;'l'
   300  001E  3475               	retlw	117	;'u'
   301  001F  3465               	retlw	101	;'e'
   302  0020  3400               	retlw	0
   303  0021                     STR_3:
   304  0021  3420               	retlw	32	;' '
   305  0022  3431               	retlw	49	;'1'
   306  0023  3432               	retlw	50	;'2'
   307  0024  3433               	retlw	51	;'3'
   308  0025  3400               	retlw	0
   309  0026                     STR_6:
   310  0026  3420               	retlw	32	;' '
   311  0027  3434               	retlw	52	;'4'
   312  0028  3435               	retlw	53	;'5'
   313  0029  3436               	retlw	54	;'6'
   314  002A  3400               	retlw	0
   315  0017                     
   316                           	psect	cinit
   317  07F5                     start_initialization:	
   318                           ; #config settings
   319                           
   320  07F5                     __initialization:
   321                           
   322                           ; Initialize objects allocated to COMMON
   323  07F5  120A  118A  25C1  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   324  07FA  00FC               	movwf	__pdataCOMMON& (0+127)
   325                           
   326                           ; Clear objects allocated to COMMON
   327  07FB  01FB               	clrf	__pbssCOMMON& (0+127)
   328  07FC                     end_of_initialization:	
   329                           ;End of C runtime variable initialization code
   330                           
   331  07FC                     __end_of__initialization:
   332  07FC  0183               	clrf	3
   333  07FD  120A  118A  2EEF   	ljmp	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMMON
   336  007B                     __pbssCOMMON:
   337  007B                     _RS:
   338  007B                     	ds	1
   339                           
   340                           	psect	dataCOMMON
   341  007C                     __pdataCOMMON:
   342  007C                     _BackLight_State:
   343  007C                     	ds	1
   344                           
   345                           	psect	cstackCOMMON
   346  0070                     __pcstackCOMMON:
   347  0070                     ?_I2C_Master_Init:
   348  0070                     ??_I2C_Master_Init:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_LCD_Init:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_write:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_write2:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_Delay:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_LCD_Write_String:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_IO_Expander_Write:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_LCD_CMD:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_main:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_I2C_Master_Wait:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ??_I2C_Master_Wait:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_I2C_Master_Start:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_I2C_Master_Start:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_I2C_Master_Stop:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_I2C_Master_Stop:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_I2C_Master_Write:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_I2C_Master_Write:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_LCD_Write_4Bit:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_LCD_Write_Char:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     I2C_Master_Write@data:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     Delay@counter:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 2 bytes @ 0x0
   413  0070                     	ds	1
   414  0071                     ??_IO_Expander_Write:
   415  0071                     IO_Expander_Write@Data:	
   416                           ; 1 bytes @ 0x1
   417                           
   418                           
   419                           ; 1 bytes @ 0x1
   420  0071                     	ds	1
   421  0072                     ??_Delay:
   422  0072                     ??_LCD_Write_4Bit:	
   423                           ; 1 bytes @ 0x2
   424                           
   425                           
   426                           ; 1 bytes @ 0x2
   427  0072                     	ds	1
   428  0073                     LCD_Write_4Bit@Nibble:
   429                           
   430                           ; 1 bytes @ 0x3
   431  0073                     	ds	1
   432  0074                     ??_LCD_CMD:
   433  0074                     ??_LCD_Write_Char:	
   434                           ; 1 bytes @ 0x4
   435                           
   436                           
   437                           ; 1 bytes @ 0x4
   438  0074                     	ds	1
   439  0075                     LCD_CMD@CMD:
   440  0075                     LCD_Write_Char@Data:	
   441                           ; 1 bytes @ 0x5
   442                           
   443                           
   444                           ; 1 bytes @ 0x5
   445  0075                     	ds	1
   446  0076                     ??_LCD_Init:
   447  0076                     ?_LCD_Set_Cursor:	
   448                           ; 1 bytes @ 0x6
   449                           
   450  0076                     ??_LCD_Write_String:	
   451                           ; 1 bytes @ 0x6
   452                           
   453  0076                     LCD_Set_Cursor@COL:	
   454                           ; 1 bytes @ 0x6
   455                           
   456  0076                     LCD_Write_String@i:	
   457                           ; 1 bytes @ 0x6
   458                           
   459                           
   460                           ; 2 bytes @ 0x6
   461  0076                     	ds	1
   462  0077                     ??_LCD_Set_Cursor:
   463                           
   464                           ; 1 bytes @ 0x7
   465  0077                     	ds	1
   466  0078                     LCD_Write_String@Str:
   467                           
   468                           ; 1 bytes @ 0x8
   469  0078                     	ds	1
   470  0079                     LCD_Init@I2C_Add:
   471  0079                     LCD_Set_Cursor@ROW:	
   472                           ; 1 bytes @ 0x9
   473                           
   474                           
   475                           ; 1 bytes @ 0x9
   476  0079                     	ds	1
   477  007A                     ??_write:
   478  007A                     ??_write2:	
   479                           ; 1 bytes @ 0xA
   480                           
   481  007A                     ??_main:	
   482                           ; 1 bytes @ 0xA
   483                           
   484                           
   485                           	psect	maintext
   486  06EF                     __pmaintext:	
   487                           ; 1 bytes @ 0xA
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 17 in file "main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B00/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   507 ;;      Params:         0       0       0       0       0
   508 ;;      Locals:         0       0       0       0       0
   509 ;;      Temps:          0       0       0       0       0
   510 ;;      Totals:         0       0       0       0       0
   511 ;;Total ram usage:        0 bytes
   512 ;; Hardware stack levels required when called:    7
   513 ;; This function calls:
   514 ;;		_Delay
   515 ;;		_I2C_Master_Init
   516 ;;		_LCD_Init
   517 ;;		_write
   518 ;;		_write2
   519 ;; This function is called by:
   520 ;;		Startup code after reset
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _main
   526  06EF                     _main:
   527  06EF                     l987:	
   528                           ;incstack = 0
   529                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   530                           
   531                           
   532                           ;main.c: 18: {
   533  06EF  1683               	bsf	3,5	;RP0=1, select bank1
   534  06F0  1303               	bcf	3,6	;RP1=0, select bank1
   535  06F1  1006               	bcf	6,0	;volatile
   536  06F2                     l989:
   537                           
   538                           ;main.c: 19:     LCD_Set_Cursor(1, 1);
   539  06F2  120A  118A  25EF  120A  118A  	fcall	_I2C_Master_Init
   540  06F7                     l991:
   541                           
   542                           ;main.c: 20:     LCD_Write_String(" Khaled Magdy");
   543  06F7  304E               	movlw	78
   544  06F8  120A  118A  2759  120A  118A  	fcall	_LCD_Init
   545  06FD                     l993:
   546                           
   547                           ;main.c: 21:     LCD_Set_Cursor(2, 1);
   548  06FD  120A  118A  2699  120A  118A  	fcall	_write
   549  0702                     l995:
   550                           
   551                           ;main.c: 22:     LCD_Write_String(" DeepBlue");
   552  0702  120A  118A  26C4  120A  118A  	fcall	_write2
   553  0707                     l997:
   554                           
   555                           ;main.c: 24:     LCD_Write_String(" 123");
   556  0707  1283               	bcf	3,5	;RP0=0, select bank0
   557  0708  1303               	bcf	3,6	;RP1=0, select bank0
   558  0709  1406               	bsf	6,0	;volatile
   559  070A                     l999:
   560                           
   561                           ;main.c: 25: }
   562  070A  3050               	movlw	80
   563  070B  00F0               	movwf	Delay@counter
   564  070C  30C3               	movlw	195
   565  070D  00F1               	movwf	Delay@counter+1
   566  070E  120A  118A  25E1  120A  118A  	fcall	_Delay
   567  0713                     l1001:
   568                           
   569                           ;main.c: 26: void write2(void)
   570  0713  1283               	bcf	3,5	;RP0=0, select bank0
   571  0714  1303               	bcf	3,6	;RP1=0, select bank0
   572  0715  1006               	bcf	6,0	;volatile
   573  0716                     l1003:
   574                           
   575                           ;main.c: 27: {
   576  0716  3050               	movlw	80
   577  0717  00F0               	movwf	Delay@counter
   578  0718  30C3               	movlw	195
   579  0719  00F1               	movwf	Delay@counter+1
   580  071A  120A  118A  25E1  120A  118A  	fcall	_Delay
   581  071F  2F07               	goto	l997
   582  0720  120A  118A  2800   	ljmp	start
   583  0723                     __end_of_main:
   584                           
   585                           	psect	text1
   586  06C4                     __ptext1:	
   587 ;; *************** function _write2 *****************
   588 ;; Defined at:
   589 ;;		line 40 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   603 ;;      Params:         0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    6
   610 ;; This function calls:
   611 ;;		_LCD_Set_Cursor
   612 ;;		_LCD_Write_String
   613 ;; This function is called by:
   614 ;;		_main
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           
   619                           ;psect for function _write2
   620  06C4                     _write2:
   621  06C4                     l979:	
   622                           ;incstack = 0
   623                           ; Regs used in _write2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   624                           
   625  06C4  01F6               	clrf	LCD_Set_Cursor@COL
   626  06C5  0AF6               	incf	LCD_Set_Cursor@COL,f
   627  06C6  3001               	movlw	1
   628  06C7  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   629  06CC  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   630  06CD  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   631  06D2  01F6               	clrf	LCD_Set_Cursor@COL
   632  06D3  0AF6               	incf	LCD_Set_Cursor@COL,f
   633  06D4  3002               	movlw	2
   634  06D5  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   635  06DA  300F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   636  06DB  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   637  06E0  01F6               	clrf	LCD_Set_Cursor@COL
   638  06E1  0AF6               	incf	LCD_Set_Cursor@COL,f
   639  06E2  3003               	movlw	3
   640  06E3  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   641  06E8  301E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   642  06E9  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   643  06EE                     l32:
   644  06EE  0008               	return
   645  06EF                     __end_of_write2:
   646                           
   647                           	psect	text2
   648  0699                     __ptext2:	
   649 ;; *************** function _write *****************
   650 ;; Defined at:
   651 ;;		line 31 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   665 ;;      Params:         0       0       0       0       0
   666 ;;      Locals:         0       0       0       0       0
   667 ;;      Temps:          0       0       0       0       0
   668 ;;      Totals:         0       0       0       0       0
   669 ;;Total ram usage:        0 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    6
   672 ;; This function calls:
   673 ;;		_LCD_Set_Cursor
   674 ;;		_LCD_Write_String
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           
   681                           ;psect for function _write
   682  0699                     _write:
   683  0699                     l977:	
   684                           ;incstack = 0
   685                           ; Regs used in _write: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   686                           
   687                           
   688                           ;main.c: 33:     LCD_Write_String(" 456");
   689  0699  01F6               	clrf	LCD_Set_Cursor@COL
   690  069A  0AF6               	incf	LCD_Set_Cursor@COL,f
   691  069B  3001               	movlw	1
   692  069C  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   693                           
   694                           ;main.c: 34: }
   695  06A1  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   696  06A2  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   697                           
   698                           ;main.c: 35: void Delay(unsigned int counter)
   699  06A7  01F6               	clrf	LCD_Set_Cursor@COL
   700  06A8  0AF6               	incf	LCD_Set_Cursor@COL,f
   701  06A9  3002               	movlw	2
   702  06AA  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   703                           
   704                           ;main.c: 36: {
   705  06AF  300F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   706  06B0  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   707                           
   708                           ;main.c: 37:   while(counter>0) counter--;
   709  06B5  01F6               	clrf	LCD_Set_Cursor@COL
   710  06B6  0AF6               	incf	LCD_Set_Cursor@COL,f
   711  06B7  3003               	movlw	3
   712  06B8  120A  118A  2723  120A  118A  	fcall	_LCD_Set_Cursor
   713                           
   714                           ;main.c: 38: }
   715  06BD  3019               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   716  06BE  120A  118A  2674  120A  118A  	fcall	_LCD_Write_String
   717  06C3                     l29:
   718  06C3  0008               	return
   719  06C4                     __end_of_write:
   720                           
   721                           	psect	text3
   722  0674                     __ptext3:	
   723 ;; *************** function _LCD_Write_String *****************
   724 ;; Defined at:
   725 ;;		line 119 in file "I2C_LCD.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;  Str             1    wreg     PTR unsigned char 
   728 ;;		 -> STR_6(5), STR_5(10), STR_4(14), STR_3(5), 
   729 ;;		 -> STR_2(10), STR_1(14), 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  Str             1    8[COMMON] PTR unsigned char 
   732 ;;		 -> STR_6(5), STR_5(10), STR_4(14), STR_3(5), 
   733 ;;		 -> STR_2(10), STR_1(14), 
   734 ;;  i               2    6[COMMON] int 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   744 ;;      Params:         0       0       0       0       0
   745 ;;      Locals:         3       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0
   747 ;;      Totals:         3       0       0       0       0
   748 ;;Total ram usage:        3 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    5
   751 ;; This function calls:
   752 ;;		_LCD_Write_Char
   753 ;; This function is called by:
   754 ;;		_write
   755 ;;		_write2
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           
   760                           ;psect for function _LCD_Write_String
   761  0674                     _LCD_Write_String:
   762                           
   763                           ;incstack = 0
   764                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   765                           ;LCD_Write_String@Str stored from wreg
   766  0674  00F8               	movwf	LCD_Write_String@Str
   767  0675                     l969:
   768                           
   769                           ;I2C_LCD.c: 119: void LCD_Write_String(char* Str);I2C_LCD.c: 120: {;I2C_LCD.c: 121:   fo
      +                          r(int i=0; Str[i]!='\0'; i++)
   770  0675  01F6               	clrf	LCD_Write_String@i
   771  0676  01F7               	clrf	LCD_Write_String@i+1
   772  0677  2E8B               	goto	l975
   773  0678                     l971:
   774                           
   775                           ;I2C_LCD.c: 122:     LCD_Write_Char(Str[i]);
   776  0678  0876               	movf	LCD_Write_String@i,w
   777  0679  0778               	addwf	LCD_Write_String@Str,w
   778  067A  0084               	movwf	4
   779  067B  120A  118A  2003  120A  118A  	fcall	stringdir
   780  0680  120A  118A  2659  120A  118A  	fcall	_LCD_Write_Char
   781  0685                     l973:
   782  0685  3001               	movlw	1
   783  0686  07F6               	addwf	LCD_Write_String@i,f
   784  0687  1803               	skipnc
   785  0688  0AF7               	incf	LCD_Write_String@i+1,f
   786  0689  3000               	movlw	0
   787  068A  07F7               	addwf	LCD_Write_String@i+1,f
   788  068B                     l975:
   789  068B  0876               	movf	LCD_Write_String@i,w
   790  068C  0778               	addwf	LCD_Write_String@Str,w
   791  068D  0084               	movwf	4
   792  068E  120A  118A  2003  120A  118A  	fcall	stringdir
   793  0693  3A00               	xorlw	0
   794  0694  1D03               	skipz
   795  0695  2E97               	goto	u91
   796  0696  2E98               	goto	u90
   797  0697                     u91:
   798  0697  2E78               	goto	l971
   799  0698                     u90:
   800  0698                     l137:
   801  0698  0008               	return
   802  0699                     __end_of_LCD_Write_String:
   803                           
   804                           	psect	text4
   805  0659                     __ptext4:	
   806 ;; *************** function _LCD_Write_Char *****************
   807 ;; Defined at:
   808 ;;		line 113 in file "I2C_LCD.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  Data            1    wreg     unsigned char 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  Data            1    5[COMMON] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   822 ;;      Params:         0       0       0       0       0
   823 ;;      Locals:         1       0       0       0       0
   824 ;;      Temps:          1       0       0       0       0
   825 ;;      Totals:         2       0       0       0       0
   826 ;;Total ram usage:        2 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    4
   829 ;; This function calls:
   830 ;;		_LCD_Write_4Bit
   831 ;; This function is called by:
   832 ;;		_LCD_Write_String
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           
   837                           ;psect for function _LCD_Write_Char
   838  0659                     _LCD_Write_Char:
   839                           
   840                           ;incstack = 0
   841                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   842                           ;LCD_Write_Char@Data stored from wreg
   843  0659  00F5               	movwf	LCD_Write_Char@Data
   844  065A                     l783:
   845                           
   846                           ;I2C_LCD.c: 113: void LCD_Write_Char(char Data);I2C_LCD.c: 114: {;I2C_LCD.c: 115:   RS =
      +                           1;
   847  065A  01FB               	clrf	_RS
   848  065B  0AFB               	incf	_RS,f
   849  065C                     l785:
   850                           
   851                           ;I2C_LCD.c: 116:   LCD_Write_4Bit(Data & 0xF0);
   852  065C  0875               	movf	LCD_Write_Char@Data,w
   853  065D  39F0               	andlw	240
   854  065E  120A  118A  2626  120A  118A  	fcall	_LCD_Write_4Bit
   855                           
   856                           ;I2C_LCD.c: 117:   LCD_Write_4Bit((Data << 4) & 0xF0);
   857  0663  0875               	movf	LCD_Write_Char@Data,w
   858  0664  00F4               	movwf	??_LCD_Write_Char
   859  0665  3003               	movlw	3
   860  0666                     u55:
   861  0666  1003               	clrc
   862  0667  0DF4               	rlf	??_LCD_Write_Char,f
   863  0668  3EFF               	addlw	-1
   864  0669  1D03               	skipz
   865  066A  2E66               	goto	u55
   866  066B  1003               	clrc
   867  066C  0D74               	rlf	??_LCD_Write_Char,w
   868  066D  39F0               	andlw	240
   869  066E  120A  118A  2626  120A  118A  	fcall	_LCD_Write_4Bit
   870  0673                     l131:
   871  0673  0008               	return
   872  0674                     __end_of_LCD_Write_Char:
   873                           
   874                           	psect	text5
   875  0723                     __ptext5:	
   876 ;; *************** function _LCD_Set_Cursor *****************
   877 ;; Defined at:
   878 ;;		line 124 in file "I2C_LCD.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  ROW             1    wreg     unsigned char 
   881 ;;  COL             1    6[COMMON] unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  ROW             1    9[COMMON] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         1       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0
   895 ;;      Temps:          2       0       0       0       0
   896 ;;      Totals:         4       0       0       0       0
   897 ;;Total ram usage:        4 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    5
   900 ;; This function calls:
   901 ;;		_LCD_CMD
   902 ;; This function is called by:
   903 ;;		_write
   904 ;;		_write2
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _LCD_Set_Cursor
   910  0723                     _LCD_Set_Cursor:
   911                           
   912                           ;incstack = 0
   913                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   914                           ;LCD_Set_Cursor@ROW stored from wreg
   915  0723  00F9               	movwf	LCD_Set_Cursor@ROW
   916  0724                     l953:
   917                           
   918                           ;I2C_LCD.c: 124: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);I2C_LCD.c: 12
      +                          5: {;I2C_LCD.c: 126:   switch(ROW)
   919  0724  2F45               	goto	l963
   920  0725                     l955:
   921                           
   922                           ;I2C_LCD.c: 129:       LCD_CMD(0xC0 + COL-1);
   923  0725  0876               	movf	LCD_Set_Cursor@COL,w
   924  0726  3EBF               	addlw	191
   925  0727  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
   926                           
   927                           ;I2C_LCD.c: 130:       break;
   928  072C  2F58               	goto	l146
   929  072D                     l957:
   930                           
   931                           ;I2C_LCD.c: 132:       LCD_CMD(0x94 + COL-1);
   932  072D  0876               	movf	LCD_Set_Cursor@COL,w
   933  072E  3E93               	addlw	147
   934  072F  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
   935                           
   936                           ;I2C_LCD.c: 133:       break;
   937  0734  2F58               	goto	l146
   938  0735                     l959:
   939                           
   940                           ;I2C_LCD.c: 135:       LCD_CMD(0xD4 + COL-1);
   941  0735  0876               	movf	LCD_Set_Cursor@COL,w
   942  0736  3ED3               	addlw	211
   943  0737  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
   944                           
   945                           ;I2C_LCD.c: 136:       break;
   946  073C  2F58               	goto	l146
   947  073D                     l961:
   948                           
   949                           ;I2C_LCD.c: 139:       LCD_CMD(0x80 + COL-1);
   950  073D  0876               	movf	LCD_Set_Cursor@COL,w
   951  073E  3E7F               	addlw	127
   952  073F  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
   953                           
   954                           ;I2C_LCD.c: 140:   }
   955  0744  2F58               	goto	l146
   956  0745                     l963:
   957  0745  0879               	movf	LCD_Set_Cursor@ROW,w
   958  0746  00F7               	movwf	??_LCD_Set_Cursor
   959  0747  01F8               	clrf	??_LCD_Set_Cursor+1
   960                           
   961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   962                           ; Switch size 1, requested type "simple"
   963                           ; Number of cases is 1, Range of values is 0 to 0
   964                           ; switch strategies available:
   965                           ; Name         Instructions Cycles
   966                           ; simple_byte            4     3 (average)
   967                           ; direct_byte           11     8 (fixed)
   968                           ; jumptable            260     6 (fixed)
   969                           ;	Chosen strategy is simple_byte
   970  0748  0878               	movf	??_LCD_Set_Cursor+1,w
   971  0749  3A00               	xorlw	0	; case 0
   972  074A  1903               	skipnz
   973  074B  2F4D               	goto	l1025
   974  074C  2F3D               	goto	l961
   975  074D                     l1025:
   976                           
   977                           ; Switch size 1, requested type "simple"
   978                           ; Number of cases is 3, Range of values is 2 to 4
   979                           ; switch strategies available:
   980                           ; Name         Instructions Cycles
   981                           ; simple_byte           10     6 (average)
   982                           ; direct_byte           20    11 (fixed)
   983                           ; jumptable            263     9 (fixed)
   984                           ;	Chosen strategy is simple_byte
   985  074D  0877               	movf	??_LCD_Set_Cursor,w
   986  074E  3A02               	xorlw	2	; case 2
   987  074F  1903               	skipnz
   988  0750  2F25               	goto	l955
   989  0751  3A01               	xorlw	1	; case 3
   990  0752  1903               	skipnz
   991  0753  2F2D               	goto	l957
   992  0754  3A07               	xorlw	7	; case 4
   993  0755  1903               	skipnz
   994  0756  2F35               	goto	l959
   995  0757  2F3D               	goto	l961
   996  0758                     l146:
   997  0758  0008               	return
   998  0759                     __end_of_LCD_Set_Cursor:
   999                           
  1000                           	psect	text6
  1001  0759                     __ptext6:	
  1002 ;; *************** function _LCD_Init *****************
  1003 ;; Defined at:
  1004 ;;		line 70 in file "I2C_LCD.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  I2C_Add         1    wreg     unsigned char 
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  I2C_Add         1    9[COMMON] unsigned char 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1018 ;;      Params:         0       0       0       0       0
  1019 ;;      Locals:         1       0       0       0       0
  1020 ;;      Temps:          3       0       0       0       0
  1021 ;;      Totals:         4       0       0       0       0
  1022 ;;Total ram usage:        4 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    5
  1025 ;; This function calls:
  1026 ;;		_IO_Expander_Write
  1027 ;;		_LCD_CMD
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           
  1034                           ;psect for function _LCD_Init
  1035  0759                     _LCD_Init:
  1036                           
  1037                           ;incstack = 0
  1038                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1039                           ;LCD_Init@I2C_Add stored from wreg
  1040  0759  00F9               	movwf	LCD_Init@I2C_Add
  1041  075A                     l821:
  1042                           
  1043                           ;I2C_LCD.c: 70: void LCD_Init(unsigned char I2C_Add);I2C_LCD.c: 71: {;I2C_LCD.c: 72:   i
      +                          2c_add = I2C_Add;
  1044  075A  0879               	movf	LCD_Init@I2C_Add,w
  1045  075B  00FF               	movwf	btemp+1
  1046  075C  087F               	movf	btemp+1,w
  1047  075D  00FA               	movwf	_i2c_add
  1048  075E                     l823:
  1049                           
  1050                           ;I2C_LCD.c: 73:   IO_Expander_Write(0x00);
  1051  075E  3000               	movlw	0
  1052  075F  120A  118A  260D  120A  118A  	fcall	_IO_Expander_Write
  1053  0764                     l825:
  1054                           
  1055                           ;I2C_LCD.c: 74:   _delay((unsigned long)((30)*(16000000/4000.0)));
  1056  0764  309C               	movlw	156
  1057  0765  00F7               	movwf	??_LCD_Init+1
  1058  0766  30D7               	movlw	215
  1059  0767  00F6               	movwf	??_LCD_Init
  1060  0768                     u117:
  1061  0768  0BF6               	decfsz	??_LCD_Init,f
  1062  0769  2F68               	goto	u117
  1063  076A  0BF7               	decfsz	??_LCD_Init+1,f
  1064  076B  2F68               	goto	u117
  1065  076C                     l827:
  1066                           
  1067                           ;I2C_LCD.c: 75:   LCD_CMD(0x03);
  1068  076C  3003               	movlw	3
  1069  076D  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1070  0772                     l829:
  1071                           
  1072                           ;I2C_LCD.c: 76:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1073  0772  301A               	movlw	26
  1074  0773  00F7               	movwf	??_LCD_Init+1
  1075  0774  30F8               	movlw	248
  1076  0775  00F6               	movwf	??_LCD_Init
  1077  0776                     u127:
  1078  0776  0BF6               	decfsz	??_LCD_Init,f
  1079  0777  2F76               	goto	u127
  1080  0778  0BF7               	decfsz	??_LCD_Init+1,f
  1081  0779  2F76               	goto	u127
  1082  077A  0000               	nop
  1083  077B                     l831:
  1084                           
  1085                           ;I2C_LCD.c: 77:   LCD_CMD(0x03);
  1086  077B  3003               	movlw	3
  1087  077C  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1088  0781                     l833:
  1089                           
  1090                           ;I2C_LCD.c: 78:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1091  0781  301A               	movlw	26
  1092  0782  00F7               	movwf	??_LCD_Init+1
  1093  0783  30F8               	movlw	248
  1094  0784  00F6               	movwf	??_LCD_Init
  1095  0785                     u137:
  1096  0785  0BF6               	decfsz	??_LCD_Init,f
  1097  0786  2F85               	goto	u137
  1098  0787  0BF7               	decfsz	??_LCD_Init+1,f
  1099  0788  2F85               	goto	u137
  1100  0789  0000               	nop
  1101  078A                     l835:
  1102                           
  1103                           ;I2C_LCD.c: 79:   LCD_CMD(0x03);
  1104  078A  3003               	movlw	3
  1105  078B  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1106  0790                     l837:
  1107                           
  1108                           ;I2C_LCD.c: 80:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1109  0790  301A               	movlw	26
  1110  0791  00F7               	movwf	??_LCD_Init+1
  1111  0792  30F8               	movlw	248
  1112  0793  00F6               	movwf	??_LCD_Init
  1113  0794                     u147:
  1114  0794  0BF6               	decfsz	??_LCD_Init,f
  1115  0795  2F94               	goto	u147
  1116  0796  0BF7               	decfsz	??_LCD_Init+1,f
  1117  0797  2F94               	goto	u147
  1118  0798  0000               	nop
  1119  0799                     l839:
  1120                           
  1121                           ;I2C_LCD.c: 81:   LCD_CMD(0x02);
  1122  0799  3002               	movlw	2
  1123  079A  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1124  079F                     l841:
  1125                           
  1126                           ;I2C_LCD.c: 82:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1127  079F  301A               	movlw	26
  1128  07A0  00F7               	movwf	??_LCD_Init+1
  1129  07A1  30F8               	movlw	248
  1130  07A2  00F6               	movwf	??_LCD_Init
  1131  07A3                     u157:
  1132  07A3  0BF6               	decfsz	??_LCD_Init,f
  1133  07A4  2FA3               	goto	u157
  1134  07A5  0BF7               	decfsz	??_LCD_Init+1,f
  1135  07A6  2FA3               	goto	u157
  1136  07A7  0000               	nop
  1137  07A8                     l843:
  1138                           
  1139                           ;I2C_LCD.c: 83:   LCD_CMD(0x20 | (2 << 2));
  1140  07A8  3028               	movlw	40
  1141  07A9  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1142  07AE                     l845:
  1143                           
  1144                           ;I2C_LCD.c: 84:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1145  07AE  3002               	movlw	2
  1146  07AF  00F8               	movwf	??_LCD_Init+2
  1147  07B0  3004               	movlw	4
  1148  07B1  00F7               	movwf	??_LCD_Init+1
  1149  07B2  30BA               	movlw	186
  1150  07B3  00F6               	movwf	??_LCD_Init
  1151  07B4                     u167:
  1152  07B4  0BF6               	decfsz	??_LCD_Init,f
  1153  07B5  2FB4               	goto	u167
  1154  07B6  0BF7               	decfsz	??_LCD_Init+1,f
  1155  07B7  2FB4               	goto	u167
  1156  07B8  0BF8               	decfsz	??_LCD_Init+2,f
  1157  07B9  2FB4               	goto	u167
  1158  07BA  0000               	nop
  1159  07BB                     l847:
  1160                           
  1161                           ;I2C_LCD.c: 85:   LCD_CMD(0x0C);
  1162  07BB  300C               	movlw	12
  1163  07BC  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1164  07C1                     l849:
  1165                           
  1166                           ;I2C_LCD.c: 86:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1167  07C1  3002               	movlw	2
  1168  07C2  00F8               	movwf	??_LCD_Init+2
  1169  07C3  3004               	movlw	4
  1170  07C4  00F7               	movwf	??_LCD_Init+1
  1171  07C5  30BA               	movlw	186
  1172  07C6  00F6               	movwf	??_LCD_Init
  1173  07C7                     u177:
  1174  07C7  0BF6               	decfsz	??_LCD_Init,f
  1175  07C8  2FC7               	goto	u177
  1176  07C9  0BF7               	decfsz	??_LCD_Init+1,f
  1177  07CA  2FC7               	goto	u177
  1178  07CB  0BF8               	decfsz	??_LCD_Init+2,f
  1179  07CC  2FC7               	goto	u177
  1180  07CD  0000               	nop
  1181  07CE                     l851:
  1182                           
  1183                           ;I2C_LCD.c: 87:   LCD_CMD(0x01);
  1184  07CE  3001               	movlw	1
  1185  07CF  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1186  07D4                     l853:
  1187                           
  1188                           ;I2C_LCD.c: 88:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1189  07D4  3002               	movlw	2
  1190  07D5  00F8               	movwf	??_LCD_Init+2
  1191  07D6  3004               	movlw	4
  1192  07D7  00F7               	movwf	??_LCD_Init+1
  1193  07D8  30BA               	movlw	186
  1194  07D9  00F6               	movwf	??_LCD_Init
  1195  07DA                     u187:
  1196  07DA  0BF6               	decfsz	??_LCD_Init,f
  1197  07DB  2FDA               	goto	u187
  1198  07DC  0BF7               	decfsz	??_LCD_Init+1,f
  1199  07DD  2FDA               	goto	u187
  1200  07DE  0BF8               	decfsz	??_LCD_Init+2,f
  1201  07DF  2FDA               	goto	u187
  1202  07E0  0000               	nop
  1203  07E1                     l855:
  1204                           
  1205                           ;I2C_LCD.c: 89:   LCD_CMD(0x04 | 0x02);
  1206  07E1  3006               	movlw	6
  1207  07E2  120A  118A  263F  120A  118A  	fcall	_LCD_CMD
  1208  07E7                     l857:
  1209                           
  1210                           ;I2C_LCD.c: 90:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1211  07E7  3002               	movlw	2
  1212  07E8  00F8               	movwf	??_LCD_Init+2
  1213  07E9  3004               	movlw	4
  1214  07EA  00F7               	movwf	??_LCD_Init+1
  1215  07EB  30BA               	movlw	186
  1216  07EC  00F6               	movwf	??_LCD_Init
  1217  07ED                     u197:
  1218  07ED  0BF6               	decfsz	??_LCD_Init,f
  1219  07EE  2FED               	goto	u197
  1220  07EF  0BF7               	decfsz	??_LCD_Init+1,f
  1221  07F0  2FED               	goto	u197
  1222  07F1  0BF8               	decfsz	??_LCD_Init+2,f
  1223  07F2  2FED               	goto	u197
  1224  07F3  0000               	nop
  1225  07F4                     l119:
  1226  07F4  0008               	return
  1227  07F5                     __end_of_LCD_Init:
  1228                           
  1229                           	psect	text7
  1230  063F                     __ptext7:	
  1231 ;; *************** function _LCD_CMD *****************
  1232 ;; Defined at:
  1233 ;;		line 107 in file "I2C_LCD.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  CMD             1    wreg     unsigned char 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  CMD             1    5[COMMON] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         0       0       0       0       0
  1248 ;;      Locals:         1       0       0       0       0
  1249 ;;      Temps:          1       0       0       0       0
  1250 ;;      Totals:         2       0       0       0       0
  1251 ;;Total ram usage:        2 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    4
  1254 ;; This function calls:
  1255 ;;		_LCD_Write_4Bit
  1256 ;; This function is called by:
  1257 ;;		_LCD_Init
  1258 ;;		_LCD_Set_Cursor
  1259 ;;		_LCD_SL
  1260 ;;		_LCD_SR
  1261 ;;		_LCD_Clear
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           
  1266                           ;psect for function _LCD_CMD
  1267  063F                     _LCD_CMD:
  1268                           
  1269                           ;incstack = 0
  1270                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1271                           ;LCD_CMD@CMD stored from wreg
  1272  063F  00F5               	movwf	LCD_CMD@CMD
  1273  0640                     l777:
  1274                           
  1275                           ;I2C_LCD.c: 107: void LCD_CMD(unsigned char CMD);I2C_LCD.c: 108: {;I2C_LCD.c: 109:   RS 
      +                          = 0;
  1276  0640  01FB               	clrf	_RS
  1277  0641                     l779:
  1278                           
  1279                           ;I2C_LCD.c: 110:   LCD_Write_4Bit(CMD & 0xF0);
  1280  0641  0875               	movf	LCD_CMD@CMD,w
  1281  0642  39F0               	andlw	240
  1282  0643  120A  118A  2626  120A  118A  	fcall	_LCD_Write_4Bit
  1283  0648                     l781:
  1284                           
  1285                           ;I2C_LCD.c: 111:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  1286  0648  0875               	movf	LCD_CMD@CMD,w
  1287  0649  00F4               	movwf	??_LCD_CMD
  1288  064A  3003               	movlw	3
  1289  064B                     u45:
  1290  064B  1003               	clrc
  1291  064C  0DF4               	rlf	??_LCD_CMD,f
  1292  064D  3EFF               	addlw	-1
  1293  064E  1D03               	skipz
  1294  064F  2E4B               	goto	u45
  1295  0650  1003               	clrc
  1296  0651  0D74               	rlf	??_LCD_CMD,w
  1297  0652  39F0               	andlw	240
  1298  0653  120A  118A  2626  120A  118A  	fcall	_LCD_Write_4Bit
  1299  0658                     l128:
  1300  0658  0008               	return
  1301  0659                     __end_of_LCD_CMD:
  1302                           
  1303                           	psect	text8
  1304  0626                     __ptext8:	
  1305 ;; *************** function _LCD_Write_4Bit *****************
  1306 ;; Defined at:
  1307 ;;		line 99 in file "I2C_LCD.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  Nibble          1    wreg     unsigned char 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  Nibble          1    3[COMMON] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         0       0       0       0       0
  1322 ;;      Locals:         1       0       0       0       0
  1323 ;;      Temps:          1       0       0       0       0
  1324 ;;      Totals:         2       0       0       0       0
  1325 ;;Total ram usage:        2 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    3
  1328 ;; This function calls:
  1329 ;;		_IO_Expander_Write
  1330 ;; This function is called by:
  1331 ;;		_LCD_CMD
  1332 ;;		_LCD_Write_Char
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           
  1337                           ;psect for function _LCD_Write_4Bit
  1338  0626                     _LCD_Write_4Bit:
  1339                           
  1340                           ;incstack = 0
  1341                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1342                           ;LCD_Write_4Bit@Nibble stored from wreg
  1343  0626  00F3               	movwf	LCD_Write_4Bit@Nibble
  1344  0627                     l771:
  1345                           
  1346                           ;I2C_LCD.c: 99: void LCD_Write_4Bit(unsigned char Nibble);I2C_LCD.c: 100: {;I2C_LCD.c: 1
      +                          02:   Nibble |= RS;
  1347  0627  087B               	movf	_RS,w
  1348  0628  00FF               	movwf	btemp+1
  1349  0629  087F               	movf	btemp+1,w
  1350  062A  04F3               	iorwf	LCD_Write_4Bit@Nibble,f
  1351  062B                     l773:
  1352                           
  1353                           ;I2C_LCD.c: 103:   IO_Expander_Write(Nibble | 0x04);
  1354  062B  0873               	movf	LCD_Write_4Bit@Nibble,w
  1355  062C  3804               	iorlw	4
  1356  062D  120A  118A  260D  120A  118A  	fcall	_IO_Expander_Write
  1357  0632                     l775:
  1358                           
  1359                           ;I2C_LCD.c: 104:   IO_Expander_Write(Nibble & 0xFB);
  1360  0632  0873               	movf	LCD_Write_4Bit@Nibble,w
  1361  0633  39FB               	andlw	251
  1362  0634  120A  118A  260D  120A  118A  	fcall	_IO_Expander_Write
  1363                           
  1364                           ;I2C_LCD.c: 105:   _delay((unsigned long)((50)*(16000000/4000000.0)));
  1365  0639  3042               	movlw	66
  1366  063A  00F2               	movwf	??_LCD_Write_4Bit
  1367  063B                     u207:
  1368  063B  0BF2               	decfsz	??_LCD_Write_4Bit,f
  1369  063C  2E3B               	goto	u207
  1370  063D  0000               	nop
  1371  063E                     l125:
  1372  063E  0008               	return
  1373  063F                     __end_of_LCD_Write_4Bit:
  1374                           
  1375                           	psect	text9
  1376  060D                     __ptext9:	
  1377 ;; *************** function _IO_Expander_Write *****************
  1378 ;; Defined at:
  1379 ;;		line 92 in file "I2C_LCD.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  Data            1    wreg     unsigned char 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  Data            1    1[COMMON] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0, pclath, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1393 ;;      Params:         0       0       0       0       0
  1394 ;;      Locals:         1       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0
  1396 ;;      Totals:         1       0       0       0       0
  1397 ;;Total ram usage:        1 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    2
  1400 ;; This function calls:
  1401 ;;		_I2C_Master_Start
  1402 ;;		_I2C_Master_Stop
  1403 ;;		_I2C_Master_Write
  1404 ;; This function is called by:
  1405 ;;		_LCD_Init
  1406 ;;		_LCD_Write_4Bit
  1407 ;;		_Backlight
  1408 ;;		_noBacklight
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _IO_Expander_Write
  1414  060D                     _IO_Expander_Write:
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  1418                           ;IO_Expander_Write@Data stored from wreg
  1419  060D  00F1               	movwf	IO_Expander_Write@Data
  1420  060E                     l769:
  1421                           
  1422                           ;I2C_LCD.c: 92: void IO_Expander_Write(unsigned char Data);I2C_LCD.c: 93: {;I2C_LCD.c: 9
      +                          4:   I2C_Master_Start();
  1423  060E  120A  118A  25C2  120A  118A  	fcall	_I2C_Master_Start
  1424                           
  1425                           ;I2C_LCD.c: 95:   I2C_Master_Write(i2c_add);
  1426  0613  087A               	movf	_i2c_add,w
  1427  0614  120A  118A  25FD  120A  118A  	fcall	_I2C_Master_Write
  1428                           
  1429                           ;I2C_LCD.c: 96:   I2C_Master_Write(Data | BackLight_State);
  1430  0619  0871               	movf	IO_Expander_Write@Data,w
  1431  061A  047C               	iorwf	_BackLight_State,w
  1432  061B  120A  118A  25FD  120A  118A  	fcall	_I2C_Master_Write
  1433                           
  1434                           ;I2C_LCD.c: 97:   I2C_Master_Stop();
  1435  0620  120A  118A  25CB  120A  118A  	fcall	_I2C_Master_Stop
  1436  0625                     l122:
  1437  0625  0008               	return
  1438  0626                     __end_of_IO_Expander_Write:
  1439                           
  1440                           	psect	text10
  1441  05FD                     __ptext10:	
  1442 ;; *************** function _I2C_Master_Write *****************
  1443 ;; Defined at:
  1444 ;;		line 49 in file "I2C_LCD.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  data            1    wreg     unsigned char 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  data            1    0[COMMON] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      unsigned char 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0, pclath, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1458 ;;      Params:         0       0       0       0       0
  1459 ;;      Locals:         1       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0
  1461 ;;      Totals:         1       0       0       0       0
  1462 ;;Total ram usage:        1 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    1
  1465 ;; This function calls:
  1466 ;;		_I2C_Master_Wait
  1467 ;; This function is called by:
  1468 ;;		_IO_Expander_Write
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           
  1473                           ;psect for function _I2C_Master_Write
  1474  05FD                     _I2C_Master_Write:
  1475                           
  1476                           ;incstack = 0
  1477                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  1478                           ;I2C_Master_Write@data stored from wreg
  1479  05FD  00F0               	movwf	I2C_Master_Write@data
  1480  05FE                     l765:
  1481                           
  1482                           ;I2C_LCD.c: 49: unsigned char I2C_Master_Write(unsigned char data);I2C_LCD.c: 50: {;I2C_
      +                          LCD.c: 51:   I2C_Master_Wait();
  1483  05FE  120A  118A  25D4  120A  118A  	fcall	_I2C_Master_Wait
  1484  0603                     l767:
  1485                           
  1486                           ;I2C_LCD.c: 52:   SSPBUF = data;
  1487  0603  0870               	movf	I2C_Master_Write@data,w
  1488  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0606  0093               	movwf	19	;volatile
  1491  0607                     l107:	
  1492                           ;I2C_LCD.c: 53:   while(!SSPIF);
  1493                           
  1494  0607  1D8C               	btfss	12,3	;volatile
  1495  0608  2E0A               	goto	u31
  1496  0609  2E0B               	goto	u30
  1497  060A                     u31:
  1498  060A  2E07               	goto	l107
  1499  060B                     u30:
  1500  060B                     l109:
  1501                           
  1502                           ;I2C_LCD.c: 54:   SSPIF = 0;
  1503  060B  118C               	bcf	12,3	;volatile
  1504  060C                     l110:	
  1505                           ;I2C_LCD.c: 55:   return ACKSTAT;;	Return value of _I2C_Master_Write is never used
  1506                           
  1507  060C  0008               	return
  1508  060D                     __end_of_I2C_Master_Write:
  1509                           
  1510                           	psect	text11
  1511  05CB                     __ptext11:	
  1512 ;; *************** function _I2C_Master_Stop *****************
  1513 ;; Defined at:
  1514 ;;		line 32 in file "I2C_LCD.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0
  1531 ;;      Totals:         0       0       0       0       0
  1532 ;;Total ram usage:        0 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    1
  1535 ;; This function calls:
  1536 ;;		_I2C_Master_Wait
  1537 ;; This function is called by:
  1538 ;;		_IO_Expander_Write
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           
  1543                           ;psect for function _I2C_Master_Stop
  1544  05CB                     _I2C_Master_Stop:
  1545  05CB                     l761:	
  1546                           ;incstack = 0
  1547                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  1548                           
  1549                           
  1550                           ;I2C_LCD.c: 34:   I2C_Master_Wait();
  1551  05CB  120A  118A  25D4  120A  118A  	fcall	_I2C_Master_Wait
  1552  05D0                     l763:
  1553                           
  1554                           ;I2C_LCD.c: 35:   PEN = 1;
  1555  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1556  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  1557  05D2  1511               	bsf	17,2	;volatile
  1558  05D3                     l98:
  1559  05D3  0008               	return
  1560  05D4                     __end_of_I2C_Master_Stop:
  1561                           
  1562                           	psect	text12
  1563  05C2                     __ptext12:	
  1564 ;; *************** function _I2C_Master_Start *****************
  1565 ;; Defined at:
  1566 ;;		line 22 in file "I2C_LCD.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0, pclath, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1580 ;;      Params:         0       0       0       0       0
  1581 ;;      Locals:         0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0
  1583 ;;      Totals:         0       0       0       0       0
  1584 ;;Total ram usage:        0 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    1
  1587 ;; This function calls:
  1588 ;;		_I2C_Master_Wait
  1589 ;; This function is called by:
  1590 ;;		_IO_Expander_Write
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           
  1595                           ;psect for function _I2C_Master_Start
  1596  05C2                     _I2C_Master_Start:
  1597  05C2                     l757:	
  1598                           ;incstack = 0
  1599                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  1600                           
  1601                           
  1602                           ;I2C_LCD.c: 24:   I2C_Master_Wait();
  1603  05C2  120A  118A  25D4  120A  118A  	fcall	_I2C_Master_Wait
  1604  05C7                     l759:
  1605                           
  1606                           ;I2C_LCD.c: 25:   SEN = 1;
  1607  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  1608  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  1609  05C9  1411               	bsf	17,0	;volatile
  1610  05CA                     l92:
  1611  05CA  0008               	return
  1612  05CB                     __end_of_I2C_Master_Start:
  1613                           
  1614                           	psect	text13
  1615  05D4                     __ptext13:	
  1616 ;; *************** function _I2C_Master_Wait *****************
  1617 ;; Defined at:
  1618 ;;		line 18 in file "I2C_LCD.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       0       0       0       0
  1633 ;;      Locals:         0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0
  1635 ;;      Totals:         0       0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_I2C_Master_Start
  1642 ;;		_I2C_Master_Stop
  1643 ;;		_I2C_Master_Write
  1644 ;;		_I2C_Master_RepeatedStart
  1645 ;;		_I2C_ACK
  1646 ;;		_I2C_NACK
  1647 ;;		_I2C_Read_Byte
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _I2C_Master_Wait
  1653  05D4                     _I2C_Master_Wait:
  1654  05D4                     l753:	
  1655                           ;incstack = 0
  1656                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  1657                           
  1658  05D4                     l86:	
  1659                           ;I2C_LCD.c: 20:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1660                           
  1661  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  1662  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  1663  05D6  1914               	btfsc	20,2	;volatile
  1664  05D7  2DD9               	goto	u11
  1665  05D8  2DDA               	goto	u10
  1666  05D9                     u11:
  1667  05D9  2DD4               	goto	l86
  1668  05DA                     u10:
  1669  05DA                     l755:
  1670  05DA  0811               	movf	17,w	;volatile
  1671  05DB  391F               	andlw	31
  1672  05DC  1D03               	btfss	3,2
  1673  05DD  2DDF               	goto	u21
  1674  05DE  2DE0               	goto	u20
  1675  05DF                     u21:
  1676  05DF  2DD4               	goto	l86
  1677  05E0                     u20:
  1678  05E0                     l89:
  1679  05E0  0008               	return
  1680  05E1                     __end_of_I2C_Master_Wait:
  1681                           
  1682                           	psect	text14
  1683  05EF                     __ptext14:	
  1684 ;; *************** function _I2C_Master_Init *****************
  1685 ;; Defined at:
  1686 ;;		line 6 in file "I2C_LCD.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;		None
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;		None
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  1    wreg      void 
  1693 ;; Registers used:
  1694 ;;		wreg, status,2
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1700 ;;      Params:         0       0       0       0       0
  1701 ;;      Locals:         0       0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0
  1703 ;;      Totals:         0       0       0       0       0
  1704 ;;Total ram usage:        0 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           
  1714                           ;psect for function _I2C_Master_Init
  1715  05EF                     _I2C_Master_Init:
  1716  05EF                     l811:	
  1717                           ;incstack = 0
  1718                           ; Regs used in _I2C_Master_Init: [wreg+status,2]
  1719                           
  1720                           
  1721                           ;I2C_LCD.c: 8:   SSPCON = 0x38;
  1722  05EF  3038               	movlw	56
  1723  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  1724  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  1725  05F2  0094               	movwf	20	;volatile
  1726                           
  1727                           ;I2C_LCD.c: 11:   SSPCON2 = 0x0F;
  1728  05F3  300F               	movlw	15
  1729  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  1730  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  1731  05F6  0091               	movwf	17	;volatile
  1732  05F7                     l813:
  1733                           
  1734                           ;I2C_LCD.c: 13:   SSPSTAT = 0x00;
  1735  05F7  0194               	clrf	20	;volatile
  1736  05F8                     l815:
  1737                           
  1738                           ;I2C_LCD.c: 14:   SSPADD = ((16000000/4)/100000) - 1;
  1739  05F8  3027               	movlw	39
  1740  05F9  0093               	movwf	19	;volatile
  1741  05FA                     l817:
  1742                           
  1743                           ;I2C_LCD.c: 15:   TRISC3 = 1;
  1744  05FA  1587               	bsf	7,3	;volatile
  1745  05FB                     l819:
  1746                           
  1747                           ;I2C_LCD.c: 16:   TRISC4 = 1;
  1748  05FB  1607               	bsf	7,4	;volatile
  1749  05FC                     l83:
  1750  05FC  0008               	return
  1751  05FD                     __end_of_I2C_Master_Init:
  1752                           
  1753                           	psect	text15
  1754  05E1                     __ptext15:	
  1755 ;; *************** function _Delay *****************
  1756 ;; Defined at:
  1757 ;;		line 49 in file "main.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  counter         2    0[COMMON] unsigned int 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1771 ;;      Params:         2       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0
  1774 ;;      Totals:         2       0       0       0       0
  1775 ;;Total ram usage:        2 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function _Delay
  1786  05E1                     _Delay:
  1787  05E1                     l981:	
  1788                           ;incstack = 0
  1789                           ; Regs used in _Delay: [wreg+status,2+status,0]
  1790                           
  1791  05E1  2DE8               	goto	l985
  1792  05E2                     l983:
  1793  05E2  3001               	movlw	1
  1794  05E3  02F0               	subwf	Delay@counter,f
  1795  05E4  3000               	movlw	0
  1796  05E5  1C03               	skipc
  1797  05E6  03F1               	decf	Delay@counter+1,f
  1798  05E7  02F1               	subwf	Delay@counter+1,f
  1799  05E8                     l985:
  1800  05E8  0870               	movf	Delay@counter,w
  1801  05E9  0471               	iorwf	Delay@counter+1,w
  1802  05EA  1D03               	btfss	3,2
  1803  05EB  2DED               	goto	u101
  1804  05EC  2DEE               	goto	u100
  1805  05ED                     u101:
  1806  05ED  2DE2               	goto	l983
  1807  05EE                     u100:
  1808  05EE                     l38:
  1809  05EE  0008               	return
  1810  05EF                     __end_of_Delay:
  1811  007E                     btemp	set	126	;btemp
  1812  007E                     wtemp0	set	126
  1813                           
  1814                           	psect	config
  1815                           
  1816                           ;Config register CONFIG @ 0x2007
  1817                           ;	Oscillator Selection bits
  1818                           ;	FOSC = HS, HS oscillator
  1819                           ;	Watchdog Timer Enable bit
  1820                           ;	WDTE = ON, WDT enabled
  1821                           ;	Power-up Timer Enable bit
  1822                           ;	PWRTE = OFF, PWRT disabled
  1823                           ;	Brown-out Reset Enable bit
  1824                           ;	BOREN = ON, BOR enabled
  1825                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1826                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1827                           ;	Data EEPROM Memory Code Protection bit
  1828                           ;	CPD = OFF, Data EEPROM code protection off
  1829                           ;	Flash Program Memory Write Enable bits
  1830                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1831                           ;	In-Circuit Debugger Mode bit
  1832                           ;	DEBUG = 0x1, unprogrammed default
  1833                           ;	Flash Program Memory Code Protection bit
  1834                           ;	CP = OFF, Code protection off
  1835  2007                     	org	8199
  1836  2007  3FFE               	dw	16382

Data Sizes:
    Strings     34
    Constant    0
    Data        1
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 14
		 -> STR_6(CODE[5]), STR_5(CODE[10]), STR_4(CODE[14]), STR_3(CODE[5]), 
		 -> STR_2(CODE[10]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _write2->_LCD_Set_Cursor
    _write->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Master_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2378
                              _Delay
                    _I2C_Master_Init
                           _LCD_Init
                              _write
                             _write2
 ---------------------------------------------------------------------------------
 (1) _write2                                               0     0      0    1034
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _write                                                0     0      0    1034
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     3     3      0     378
                                              6 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       2     2      0      90
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       4     3      1     656
                                              6 COMMON     4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     135
                                              6 COMMON     4     4      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              2     2      0      90
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (4) _LCD_Write_4Bit                                       2     2      0      60
                                              2 COMMON     2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (5) _IO_Expander_Write                                    1     1      0      30
                                              1 COMMON     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Write                                     1     1      0      15
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay                                                2     0      2     175
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _I2C_Master_Init
   _LCD_Init
     _IO_Expander_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _write
     _LCD_Set_Cursor
       _LCD_CMD
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
   _write2
     _LCD_Set_Cursor
       _LCD_CMD
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       D      12        0.0%
ABS                  0      0       D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 12 13:38:04 2020

                         pc 0002                          l32 06EE                          l29 06C3  
                        l38 05EE                          l83 05FC                          l92 05CA  
                        l86 05D4                          l89 05E0                          l98 05D3  
                        u10 05DA                          u11 05D9                          u20 05E0  
                        u21 05DF                          u30 060B                          u31 060A  
                        u45 064B                          u55 0666                          _RS 007B  
                        u90 0698                          u91 0697                          fsr 0004  
                       l110 060C                         l122 0625                         l107 0607  
                       l131 0673                         l109 060B                         l125 063E  
                       l119 07F4                         l128 0658                         l137 0698  
                       l146 0758                         l811 05EF                         l813 05F7  
                       l821 075A                         l815 05F8                         l831 077B  
                       l823 075E                         l817 05FA                         l753 05D4  
                       l761 05CB                         l841 079F                         l833 0781  
                       l825 0764                         l819 05FB                         l755 05DA  
                       l763 05D0                         l771 0627                         l851 07CE  
                       l843 07A8                         l835 078A                         l827 076C  
                       l757 05C2                         l765 05FE                         l773 062B  
                       l781 0648                         l853 07D4                         l845 07AE  
                       l837 0790                         l829 0772                         l759 05C7  
                       l767 0603                         l775 0632                         l855 07E1  
                       l847 07BB                         l839 0799                         l783 065A  
                       l769 060E                         l777 0640                         l857 07E7  
                       l849 07C1                         l961 073D                         l953 0724  
                       l785 065C                         l779 0641                         l955 0725  
                       l963 0745                         l971 0678                         l981 05E1  
                       l957 072D                         l973 0685                         l983 05E2  
                       l959 0735                         l975 068B                         l991 06F7  
                       l985 05E8                         l969 0675                         l977 0699  
                       l993 06FD                         l979 06C4                         l995 0702  
                       l987 06EF                         l997 0707                         l989 06F2  
                       l999 070A                         _RB0 0030                         u100 05EE  
                       u101 05ED                         u117 0768                         u207 063B  
                       u127 0776                         u137 0785                         u147 0794  
                       u157 07A3                         u167 07B4                         _PEN 048A  
                       u177 07C7                         u187 07DA                         u197 07ED  
                       _SEN 0488                         fsr0 0004             __end_of_LCD_CMD 0659  
       LCD_Write_String@Str 0078              _LCD_Set_Cursor 0723                        l1001 0713  
                      l1003 0716                        l1025 074D                        STR_1 0009  
                      STR_2 0017                        STR_3 0021                        STR_4 0009  
                      STR_5 0017                        STR_6 0026                        _RCEN 048B  
                      _RSEN 0489           ?_LCD_Write_String 0070                        _main 06EF  
                      btemp 007E                        start 0000          ??_LCD_Write_String 0076  
      LCD_Write_4Bit@Nibble 0073            __end_of_LCD_Init 07F5            ?_I2C_Master_Init 0070  
          ?_I2C_Master_Wait 0070            ?_I2C_Master_Stop 0070                       ?_main 0070  
                     _ACKEN 048C                       _ACKDT 048D                       _SSPIF 0063  
                     _Delay 05E1      __end_of_LCD_Set_Cursor 0759                       _write 0699  
                     pclath 000A                       status 0003                       wtemp0 007E  
            _LCD_Write_4Bit 0626              _LCD_Write_Char 0659             __initialization 07F5  
              __end_of_main 0723           _IO_Expander_Write 060D          ?_IO_Expander_Write 0070  
                    ??_main 007A                   ??_LCD_CMD 0074                      ?_Delay 0070  
         ?_I2C_Master_Start 0070           ?_I2C_Master_Write 0070         ??_IO_Expander_Write 0071  
           ?_LCD_Set_Cursor 0076          ??_I2C_Master_Start 0070          ??_I2C_Master_Write 0070  
                    ?_write 0070                      _SSPADD 0093                      _TRISB0 0430  
                    _TRISC3 043B                      _TRISC4 043C                      _SSPCON 0014  
                    _SSPBUF 0013      __end_of_LCD_Write_4Bit 063F      __end_of_LCD_Write_Char 0674  
 __end_of_IO_Expander_Write 0626                      _write2 06C4                __pdataCOMMON 007C  
   __end_of__initialization 07FC                   ?_LCD_Init 0070             ?_LCD_Write_4Bit 0070  
           ?_LCD_Write_Char 0070               __end_of_Delay 05EF              __pcstackCOMMON 0070  
             __end_of_write 06C4                     ??_Delay 0072                     ??_write 007A  
                ??_LCD_Init 0076                  __pnvCOMMON 007A  __size_of_IO_Expander_Write 0019  
                __pmaintext 06EF                     _ACKSTAT 048E   __size_of_LCD_Write_String 0025  
                   ?_write2 0070                     _LCD_CMD 063F                     _SSPCON2 0091  
                   _SSPSTAT 0094                  __stringtab 0003                     _i2c_add 007A  
          ??_LCD_Set_Cursor 0077                     __ptext1 06C4                     __ptext2 0699  
                   __ptext3 0674                     __ptext4 0659                     __ptext5 0723  
                   __ptext6 0759                     __ptext7 063F                     __ptext8 0626  
                   __ptext9 060D             __size_of_write2 002B    __size_of_I2C_Master_Init 000E  
  __size_of_I2C_Master_Wait 000D    __size_of_I2C_Master_Stop 0009        end_of_initialization 07FC  
 __size_of_I2C_Master_Start 0009   __size_of_I2C_Master_Write 0010                  LCD_CMD@CMD 0075  
          ??_LCD_Write_4Bit 0072           LCD_Write_String@i 0076            ??_LCD_Write_Char 0074  
         __size_of_LCD_Init 009C                Delay@counter 0070            _LCD_Write_String 0674  
             __pidataCOMMON 05C1              __end_of_write2 06EF         start_initialization 07F5  
         ??_I2C_Master_Init 0070           ??_I2C_Master_Wait 0070           ??_I2C_Master_Stop 0070  
                  ??_write2 007A                    ?_LCD_CMD 0070                 __pbssCOMMON 007B  
                 ___latbits 0002            _I2C_Master_Start 05C2            _I2C_Master_Write 05FD  
     IO_Expander_Write@Data 0071        I2C_Master_Write@data 0070                   __pstrings 0003  
            __size_of_Delay 000E              __size_of_write 002B                    _LCD_Init 0759  
               __stringbase 0008            __size_of_LCD_CMD 001A    __end_of_LCD_Write_String 0699  
        __end_of__stringtab 0009             _I2C_Master_Init 05EF             _I2C_Master_Wait 05D4  
           _I2C_Master_Stop 05CB                    __ptext10 05FD                    __ptext11 05CB  
                  __ptext12 05C2                    __ptext13 05D4                    __ptext14 05EF  
                  __ptext15 05E1     __size_of_LCD_Set_Cursor 0036             _BackLight_State 007C  
             __size_of_main 0034    __end_of_I2C_Master_Start 05CB    __end_of_I2C_Master_Write 060D  
        LCD_Write_Char@Data 0075                   stringcode 0003     __size_of_LCD_Write_4Bit 0019  
   __size_of_LCD_Write_Char 001B     __end_of_I2C_Master_Init 05FD     __end_of_I2C_Master_Wait 05E1  
   __end_of_I2C_Master_Stop 05D4             LCD_Init@I2C_Add 0079                    stringdir 0003  
                  stringtab 0003           LCD_Set_Cursor@COL 0076           LCD_Set_Cursor@ROW 0079  
